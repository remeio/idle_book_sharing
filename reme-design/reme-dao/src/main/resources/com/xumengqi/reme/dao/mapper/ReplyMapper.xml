<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.xumengqi.reme.dao.mapper.ReplyMapper">
  <resultMap id="BaseResultMap" type="com.xumengqi.reme.dao.entity.Reply">
    <id column="reply_id" jdbcType="BIGINT" property="replyId" />
    <result column="comment_id" jdbcType="BIGINT" property="commentId" />
    <result column="reply_content" jdbcType="VARCHAR" property="replyContent" />
    <result column="from_user_id" jdbcType="BIGINT" property="fromUserId" />
    <result column="to_user_id" jdbcType="BIGINT" property="toUserId" />
    <result column="is_anonymous" jdbcType="INTEGER" property="isAnonymous" />
    <result column="gmt_create" jdbcType="TIMESTAMP" property="gmtCreate" />
    <result column="gmt_modified" jdbcType="TIMESTAMP" property="gmtModified" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    reply_id, comment_id, reply_content, from_user_id, to_user_id, is_anonymous, gmt_create, 
    gmt_modified
  </sql>
  <select id="selectByExample" parameterType="com.xumengqi.reme.dao.entity.ReplyExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from reply
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from reply
    where reply_id = #{replyId,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from reply
    where reply_id = #{replyId,jdbcType=BIGINT}
  </delete>
  <delete id="deleteByExample" parameterType="com.xumengqi.reme.dao.entity.ReplyExample">
    delete from reply
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.xumengqi.reme.dao.entity.Reply">
    <selectKey keyProperty="replyId" order="AFTER" resultType="java.lang.Long">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into reply (comment_id, reply_content, from_user_id, 
      to_user_id, is_anonymous, gmt_create, 
      gmt_modified)
    values (#{commentId,jdbcType=BIGINT}, #{replyContent,jdbcType=VARCHAR}, #{fromUserId,jdbcType=BIGINT}, 
      #{toUserId,jdbcType=BIGINT}, #{isAnonymous,jdbcType=INTEGER}, #{gmtCreate,jdbcType=TIMESTAMP}, 
      #{gmtModified,jdbcType=TIMESTAMP})
  </insert>
  <insert id="insertSelective" parameterType="com.xumengqi.reme.dao.entity.Reply">
    <selectKey keyProperty="replyId" order="AFTER" resultType="java.lang.Long">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into reply
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="commentId != null">
        comment_id,
      </if>
      <if test="replyContent != null">
        reply_content,
      </if>
      <if test="fromUserId != null">
        from_user_id,
      </if>
      <if test="toUserId != null">
        to_user_id,
      </if>
      <if test="isAnonymous != null">
        is_anonymous,
      </if>
      <if test="gmtCreate != null">
        gmt_create,
      </if>
      <if test="gmtModified != null">
        gmt_modified,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="commentId != null">
        #{commentId,jdbcType=BIGINT},
      </if>
      <if test="replyContent != null">
        #{replyContent,jdbcType=VARCHAR},
      </if>
      <if test="fromUserId != null">
        #{fromUserId,jdbcType=BIGINT},
      </if>
      <if test="toUserId != null">
        #{toUserId,jdbcType=BIGINT},
      </if>
      <if test="isAnonymous != null">
        #{isAnonymous,jdbcType=INTEGER},
      </if>
      <if test="gmtCreate != null">
        #{gmtCreate,jdbcType=TIMESTAMP},
      </if>
      <if test="gmtModified != null">
        #{gmtModified,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.xumengqi.reme.dao.entity.ReplyExample" resultType="java.lang.Long">
    select count(*) from reply
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update reply
    <set>
      <if test="record.replyId != null">
        reply_id = #{record.replyId,jdbcType=BIGINT},
      </if>
      <if test="record.commentId != null">
        comment_id = #{record.commentId,jdbcType=BIGINT},
      </if>
      <if test="record.replyContent != null">
        reply_content = #{record.replyContent,jdbcType=VARCHAR},
      </if>
      <if test="record.fromUserId != null">
        from_user_id = #{record.fromUserId,jdbcType=BIGINT},
      </if>
      <if test="record.toUserId != null">
        to_user_id = #{record.toUserId,jdbcType=BIGINT},
      </if>
      <if test="record.isAnonymous != null">
        is_anonymous = #{record.isAnonymous,jdbcType=INTEGER},
      </if>
      <if test="record.gmtCreate != null">
        gmt_create = #{record.gmtCreate,jdbcType=TIMESTAMP},
      </if>
      <if test="record.gmtModified != null">
        gmt_modified = #{record.gmtModified,jdbcType=TIMESTAMP},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update reply
    set reply_id = #{record.replyId,jdbcType=BIGINT},
      comment_id = #{record.commentId,jdbcType=BIGINT},
      reply_content = #{record.replyContent,jdbcType=VARCHAR},
      from_user_id = #{record.fromUserId,jdbcType=BIGINT},
      to_user_id = #{record.toUserId,jdbcType=BIGINT},
      is_anonymous = #{record.isAnonymous,jdbcType=INTEGER},
      gmt_create = #{record.gmtCreate,jdbcType=TIMESTAMP},
      gmt_modified = #{record.gmtModified,jdbcType=TIMESTAMP}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.xumengqi.reme.dao.entity.Reply">
    update reply
    <set>
      <if test="commentId != null">
        comment_id = #{commentId,jdbcType=BIGINT},
      </if>
      <if test="replyContent != null">
        reply_content = #{replyContent,jdbcType=VARCHAR},
      </if>
      <if test="fromUserId != null">
        from_user_id = #{fromUserId,jdbcType=BIGINT},
      </if>
      <if test="toUserId != null">
        to_user_id = #{toUserId,jdbcType=BIGINT},
      </if>
      <if test="isAnonymous != null">
        is_anonymous = #{isAnonymous,jdbcType=INTEGER},
      </if>
      <if test="gmtCreate != null">
        gmt_create = #{gmtCreate,jdbcType=TIMESTAMP},
      </if>
      <if test="gmtModified != null">
        gmt_modified = #{gmtModified,jdbcType=TIMESTAMP},
      </if>
    </set>
    where reply_id = #{replyId,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.xumengqi.reme.dao.entity.Reply">
    update reply
    set comment_id = #{commentId,jdbcType=BIGINT},
      reply_content = #{replyContent,jdbcType=VARCHAR},
      from_user_id = #{fromUserId,jdbcType=BIGINT},
      to_user_id = #{toUserId,jdbcType=BIGINT},
      is_anonymous = #{isAnonymous,jdbcType=INTEGER},
      gmt_create = #{gmtCreate,jdbcType=TIMESTAMP},
      gmt_modified = #{gmtModified,jdbcType=TIMESTAMP}
    where reply_id = #{replyId,jdbcType=BIGINT}
  </update>
</mapper>
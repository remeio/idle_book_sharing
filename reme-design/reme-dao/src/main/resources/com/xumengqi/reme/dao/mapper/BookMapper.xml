<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.xumengqi.reme.dao.mapper.BookMapper">
    <resultMap id="BaseResultMap" type="com.xumengqi.reme.dao.entity.Book">
        <id column="id" jdbcType="BIGINT" property="id"/>
        <result column="book_name" jdbcType="VARCHAR" property="bookName"/>
        <result column="book_isbn" jdbcType="VARCHAR" property="bookIsbn"/>
        <result column="book_description" jdbcType="VARCHAR" property="bookDescription"/>
        <result column="book_max_period" jdbcType="INTEGER" property="bookMaxPeriod"/>
        <result column="book_deposit" jdbcType="BIGINT" property="bookDeposit"/>
        <result column="book_image_url" jdbcType="VARCHAR" property="bookImageUrl"/>
        <result column="book_catalog_id" jdbcType="BIGINT" property="bookCatalogId"/>
        <result column="school_id" jdbcType="BIGINT" property="schoolId"/>
        <result column="user_id" jdbcType="BIGINT" property="userId"/>
        <result column="book_status" jdbcType="INTEGER" property="bookStatus"/>
        <result column="gmt_create" jdbcType="TIMESTAMP" property="gmtCreate"/>
    </resultMap>
    <sql id="Example_Where_Clause">
        <where>
            <foreach collection="oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" prefixOverrides="and" suffix=")">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach close=")" collection="criterion.value" item="listItem" open="("
                                             separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Update_By_Example_Where_Clause">
        <where>
            <foreach collection="example.oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" prefixOverrides="and" suffix=")">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach close=")" collection="criterion.value" item="listItem" open="("
                                             separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Base_Column_List">
        id, book_name, book_isbn, book_description, book_max_period, book_deposit, book_image_url,
    book_catalog_id, school_id, user_id, book_status, gmt_create
    </sql>
    <select id="selectByExample" parameterType="com.xumengqi.reme.dao.entity.BookExample" resultMap="BaseResultMap">
        select
        <if test="distinct">
            distinct
        </if>
        <include refid="Base_Column_List"/>
        from book
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
        <if test="orderByClause != null">
            order by ${orderByClause}
        </if>
    </select>
    <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from book
        where id = #{id,jdbcType=BIGINT}
    </select>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
        delete
        from book
        where id = #{id,jdbcType=BIGINT}
    </delete>
    <delete id="deleteByExample" parameterType="com.xumengqi.reme.dao.entity.BookExample">
        delete from book
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </delete>
    <insert id="insert" parameterType="com.xumengqi.reme.dao.entity.Book">
        <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Long">
            SELECT LAST_INSERT_ID()
        </selectKey>
        insert into book (book_name, book_isbn, book_description,
        book_max_period, book_deposit, book_image_url,
        book_catalog_id, school_id, user_id,
        book_status, gmt_create)
        values (#{bookName,jdbcType=VARCHAR}, #{bookIsbn,jdbcType=VARCHAR}, #{bookDescription,jdbcType=VARCHAR},
        #{bookMaxPeriod,jdbcType=INTEGER}, #{bookDeposit,jdbcType=BIGINT}, #{bookImageUrl,jdbcType=VARCHAR},
        #{bookCatalogId,jdbcType=BIGINT}, #{schoolId,jdbcType=BIGINT}, #{userId,jdbcType=BIGINT},
        #{bookStatus,jdbcType=INTEGER}, #{gmtCreate,jdbcType=TIMESTAMP})
    </insert>
    <insert id="insertSelective" parameterType="com.xumengqi.reme.dao.entity.Book">
        <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Long">
            SELECT LAST_INSERT_ID()
        </selectKey>
        insert into book
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="bookName != null">
                book_name,
            </if>
            <if test="bookIsbn != null">
                book_isbn,
            </if>
            <if test="bookDescription != null">
                book_description,
            </if>
            <if test="bookMaxPeriod != null">
                book_max_period,
            </if>
            <if test="bookDeposit != null">
                book_deposit,
            </if>
            <if test="bookImageUrl != null">
                book_image_url,
            </if>
            <if test="bookCatalogId != null">
                book_catalog_id,
            </if>
            <if test="schoolId != null">
                school_id,
            </if>
            <if test="userId != null">
                user_id,
            </if>
            <if test="bookStatus != null">
                book_status,
            </if>
            <if test="gmtCreate != null">
                gmt_create,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="bookName != null">
                #{bookName,jdbcType=VARCHAR},
            </if>
            <if test="bookIsbn != null">
                #{bookIsbn,jdbcType=VARCHAR},
            </if>
            <if test="bookDescription != null">
                #{bookDescription,jdbcType=VARCHAR},
            </if>
            <if test="bookMaxPeriod != null">
                #{bookMaxPeriod,jdbcType=INTEGER},
            </if>
            <if test="bookDeposit != null">
                #{bookDeposit,jdbcType=BIGINT},
            </if>
            <if test="bookImageUrl != null">
                #{bookImageUrl,jdbcType=VARCHAR},
            </if>
            <if test="bookCatalogId != null">
                #{bookCatalogId,jdbcType=BIGINT},
            </if>
            <if test="schoolId != null">
                #{schoolId,jdbcType=BIGINT},
            </if>
            <if test="userId != null">
                #{userId,jdbcType=BIGINT},
            </if>
            <if test="bookStatus != null">
                #{bookStatus,jdbcType=INTEGER},
            </if>
            <if test="gmtCreate != null">
                #{gmtCreate,jdbcType=TIMESTAMP},
            </if>
        </trim>
    </insert>
    <select id="countByExample" parameterType="com.xumengqi.reme.dao.entity.BookExample" resultType="java.lang.Long">
        select count(*) from book
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </select>
    <update id="updateByExampleSelective" parameterType="map">
        update book
        <set>
            <if test="record.id != null">
                id = #{record.id,jdbcType=BIGINT},
            </if>
            <if test="record.bookName != null">
                book_name = #{record.bookName,jdbcType=VARCHAR},
            </if>
            <if test="record.bookIsbn != null">
                book_isbn = #{record.bookIsbn,jdbcType=VARCHAR},
            </if>
            <if test="record.bookDescription != null">
                book_description = #{record.bookDescription,jdbcType=VARCHAR},
            </if>
            <if test="record.bookMaxPeriod != null">
                book_max_period = #{record.bookMaxPeriod,jdbcType=INTEGER},
            </if>
            <if test="record.bookDeposit != null">
                book_deposit = #{record.bookDeposit,jdbcType=BIGINT},
            </if>
            <if test="record.bookImageUrl != null">
                book_image_url = #{record.bookImageUrl,jdbcType=VARCHAR},
            </if>
            <if test="record.bookCatalogId != null">
                book_catalog_id = #{record.bookCatalogId,jdbcType=BIGINT},
            </if>
            <if test="record.schoolId != null">
                school_id = #{record.schoolId,jdbcType=BIGINT},
            </if>
            <if test="record.userId != null">
                user_id = #{record.userId,jdbcType=BIGINT},
            </if>
            <if test="record.bookStatus != null">
                book_status = #{record.bookStatus,jdbcType=INTEGER},
            </if>
            <if test="record.gmtCreate != null">
                gmt_create = #{record.gmtCreate,jdbcType=TIMESTAMP},
            </if>
        </set>
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
    </update>
    <update id="updateByExample" parameterType="map">
        update book
        set id = #{record.id,jdbcType=BIGINT},
        book_name = #{record.bookName,jdbcType=VARCHAR},
        book_isbn = #{record.bookIsbn,jdbcType=VARCHAR},
        book_description = #{record.bookDescription,jdbcType=VARCHAR},
        book_max_period = #{record.bookMaxPeriod,jdbcType=INTEGER},
        book_deposit = #{record.bookDeposit,jdbcType=BIGINT},
        book_image_url = #{record.bookImageUrl,jdbcType=VARCHAR},
        book_catalog_id = #{record.bookCatalogId,jdbcType=BIGINT},
        school_id = #{record.schoolId,jdbcType=BIGINT},
        user_id = #{record.userId,jdbcType=BIGINT},
        book_status = #{record.bookStatus,jdbcType=INTEGER},
        gmt_create = #{record.gmtCreate,jdbcType=TIMESTAMP}
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
    </update>
    <update id="updateByPrimaryKeySelective" parameterType="com.xumengqi.reme.dao.entity.Book">
        update book
        <set>
            <if test="bookName != null">
                book_name = #{bookName,jdbcType=VARCHAR},
            </if>
            <if test="bookIsbn != null">
                book_isbn = #{bookIsbn,jdbcType=VARCHAR},
            </if>
            <if test="bookDescription != null">
                book_description = #{bookDescription,jdbcType=VARCHAR},
            </if>
            <if test="bookMaxPeriod != null">
                book_max_period = #{bookMaxPeriod,jdbcType=INTEGER},
            </if>
            <if test="bookDeposit != null">
                book_deposit = #{bookDeposit,jdbcType=BIGINT},
            </if>
            <if test="bookImageUrl != null">
                book_image_url = #{bookImageUrl,jdbcType=VARCHAR},
            </if>
            <if test="bookCatalogId != null">
                book_catalog_id = #{bookCatalogId,jdbcType=BIGINT},
            </if>
            <if test="schoolId != null">
                school_id = #{schoolId,jdbcType=BIGINT},
            </if>
            <if test="userId != null">
                user_id = #{userId,jdbcType=BIGINT},
            </if>
            <if test="bookStatus != null">
                book_status = #{bookStatus,jdbcType=INTEGER},
            </if>
            <if test="gmtCreate != null">
                gmt_create = #{gmtCreate,jdbcType=TIMESTAMP},
            </if>
        </set>
        where id = #{id,jdbcType=BIGINT}
    </update>
    <update id="updateByPrimaryKey" parameterType="com.xumengqi.reme.dao.entity.Book">
        update book
        set book_name        = #{bookName,jdbcType=VARCHAR},
            book_isbn        = #{bookIsbn,jdbcType=VARCHAR},
            book_description = #{bookDescription,jdbcType=VARCHAR},
            book_max_period  = #{bookMaxPeriod,jdbcType=INTEGER},
            book_deposit     = #{bookDeposit,jdbcType=BIGINT},
            book_image_url   = #{bookImageUrl,jdbcType=VARCHAR},
            book_catalog_id  = #{bookCatalogId,jdbcType=BIGINT},
            school_id        = #{schoolId,jdbcType=BIGINT},
            user_id          = #{userId,jdbcType=BIGINT},
            book_status      = #{bookStatus,jdbcType=INTEGER},
            gmt_create       = #{gmtCreate,jdbcType=TIMESTAMP}
        where id = #{id,jdbcType=BIGINT}
    </update>
</mapper>